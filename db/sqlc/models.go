// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Sexgen string

const (
	SexgenM Sexgen = "M"
	SexgenF Sexgen = "F"
)

func (e *Sexgen) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Sexgen(s)
	case string:
		*e = Sexgen(s)
	default:
		return fmt.Errorf("unsupported scan type for Sexgen: %T", src)
	}
	return nil
}

type NullSexgen struct {
	Sexgen Sexgen
	Valid  bool // Valid is true if Sexgen is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSexgen) Scan(value interface{}) error {
	if value == nil {
		ns.Sexgen, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Sexgen.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSexgen) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Sexgen), nil
}

type Diretor struct {
	ID              uuid.UUID    `json:"id"`
	Nome            string       `json:"nome"`
	Sexo            Sexgen       `json:"sexo"`
	DataCriacao     time.Time    `json:"data_criacao"`
	DataAtualizacao time.Time    `json:"data_atualizacao"`
	DataRemocao     sql.NullTime `json:"data_remocao"`
}
